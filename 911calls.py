# -*- coding: utf-8 -*-
"""911Calls.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xMPfkHYVQCz9e5uUDo_acZJOfSqQwsJp
"""

import numpy as np
import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/911.csv')

df.info()

df.head()

"""Top 5 ZIPCODES for 911 calls"""

df['zip'].value_counts().head(5)

"""Top 5 TOWNSHIPS for 911 calls"""

df['twp'].value_counts().head(5)

"""How many unique title codes are there?"""

df['title'].nunique()

"""In the titles column there are "Reasons/Departments" specified vefore the title code. There are EMS, Fire, and Traffic. Creating a new column called "Reason" that contains string value by using .apply()."""

x = df['title'].iloc[0]

x.split(':')[0]

df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])

df['Reason']

"""Most Common reasons for 911 call"""

df['Reason'].value_counts()

"""Result-> EMS is the most common reason

Countplot of 911 calls by Reason
"""

sns.countplot(x = 'Reason', data = df)

"""Data type of the objects in the timestamp column:"""

type(df['timeStamp'].iloc[0])

"""Converting the column from strings to DataTime objects using pd.to_datetime"""

df['timeStamp']= pd.to_datetime(df['timeStamp'])

type(df['timeStamp'].iloc[0])

"""Grabbing specific attributes from Datetime object by calling them."""

time = df['timeStamp'].iloc[0]
time.hour

time

time.year

time.month

df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)

df['Hour']

df.head()

"""Two new columns are added at the end

Mapping actual string name to the day of the week  by using .map() to the day of week intergers 0 to 6.
"""

df['dayofweek'] = df['timeStamp'].apply(lambda time: time.dayofweek)

df.drop(df.columns[-1], axis=1, inplace=True)

df.head()

dmap = {0: 'Mon', 1: 'Tue', 2: 'Wed', 3: 'Thu', 4: 'Fri', 5: 'Sat', 6:'Sun'}

df['Day of Week'] = df['dayofweek'].map(dmap)

df.head()

"""Couning plot of day od week column with the hues based off of the Reason Column"""

sns.countplot(x = 'Day of Week', data = df, hue='Reason')
plt.legend(bbox_to_anchor = (1.05,1), loc =2, borderaxespad =0.)

"""Similar plot for Month"""

df['Month'] = df['timeStamp'].apply(lambda time: time.month)

sns.countplot(x = 'Month', data = df, hue='Reason')
plt.legend(bbox_to_anchor = (1.05,1), loc =2, borderaxespad =0.)

"""Something strange about this plot -> Not all months are mentioned in the plot"""

byMonth = df.groupby('Month').count()

byMonth.head()

"""Creating a simple plot off of the dataframe indicating the count of the calls per month."""

byMonth['lat'].plot()

sns.countplot(x = 'Month', data = df)
plt.legend(bbox_to_anchor = (1.05,1), loc =2, borderaxespad =0.)

"""Creating linear fit on the numbers of the calls per month by using seaborn's .import()."""

sns.lmplot(x = 'Month', y = 'twp', data = byMonth.reset_index())

"""Creating new column Date from the timestamp using .date() along with apply."""

t = df['timeStamp'].iloc[0]

df['Date'] = df['timeStamp'].apply(lambda t: t.date())

df.head()

t

t.date()

"""Now doing groupby this date column with the count() aggregate and creating a plot of counts of 911 calls."""

df.groupby('Date').count().head()

"""for Dec 11, 2015, only 333 zip codes are available for 396 calls. This signifies that some data is missing."""

df.groupby('Date').count()['lat']

df.groupby('Date').count()['lat'].plot()
plt.tight_layout()

"""Recreating the plot but by creating 3 separate plots with each plot representing a Reason for the 911 Calls."""

df[df['Reason'] == 'Traffic'].groupby('Date').count()['lat'].plot()
plt.tight_layout()

df[df['Reason'] == 'Fire'].groupby('Date').count()['lat'].plot()
plt.tight_layout()

df[df['Reason'] == 'EMS'].groupby('Date').count()['lat'].plot()
plt.tight_layout()

"""Heatmaps using seaborn for the data. First, restructuring the dataframe so that columns become hours and day of week becomes index."""

### USING UNSTACK METHOD
df.groupby(by =['Day of Week', 'Hour']).count()

### USING UNSTACK METHOD
df.groupby(by =['Day of Week', 'Hour']).count()['Reason']

### USING UNSTACK METHOD
dayHour = df.groupby(by =['Day of Week', 'Hour']).count()['Reason'].unstack()

dayHour

"""Creating heatmap using new DataFrame: dayHour"""

plt.figure(figsize= (12,6))
sns.heatmap(dayHour, cmap = 'viridis')

"""Observation: Midnight and early morning had least 911 calls as most people are asleep at that time. Most calls are at evening time which relates to Traffic being the most common reason.

Clustermap for the same:
"""

sns.clustermap(dayHour, cmap = 'viridis')

"""Repeating the same plots and the operations, for a Dataframe that shows the Months as the column"""

### USING UNSTACK METHOD
df.groupby(by =['Day of Week', 'Month']).count()

### USING UNSTACK METHOD
dayMonth = df.groupby(by =['Day of Week', 'Month']).count()['Reason'].unstack()

dayMonth

"""Heatmap:"""

plt.figure(figsize= (12,6))
sns.heatmap(dayMonth, cmap = 'viridis')

"""Clustermap:"""

sns.clustermap(dayMonth, cmap = 'viridis')